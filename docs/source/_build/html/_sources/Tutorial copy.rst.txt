Tutorial
####################

01 - Simple command
*******************

This first example is a very basic program that sends a command to a device then print it out.

Here is the complete example:

.. code-block:: Python

   # Python library import
   import asyncio, netscud


   async def task():
      """
      Async function
      """

      my_device = {
         "ip": "192.168.0.16",
         "username": "cisco",
         "password": "cisco",
         "device_type": "cisco_ios",
      }

      # Creation of a device
      async with netscud.ConnectDevice(**my_device) as sw1:

         # Command to send
         cmd = "show interfaces description"

         # Sending command
         output = await sw1.send_command(cmd)

         # Display message
         print(output)


   # Main function call
   if __name__ == "__main__":

      # Main async loop
      asyncio.run(task())

**Explanation:**

At the beginning it shows how to define the parameters of a network device (IP address, Login, Password and Device type) with a python dictionary. Parameters must be adapted according to your device.

.. code-block:: Python

   my_device = {
      "ip": "192.168.0.16",
      "username": "cisco",
      "password": "cisco",
      "device_type": "cisco_ios",
   }

netscud.ConnectDevice() is a function that is used for connecting a device and returns an object used to interact with the device with various methods. The default connection is performed in SSH. Do pay attention that a "with" instruction is used (also known as context manager) which allows to have an automatic close of the connection with the device.

.. code-block:: Python

   # Creation of a device
   async with netscud.ConnectDevice(**my_device) as sw1:

Commands to the device is sent with send_command() method. Parameters to send_commands can be a string variable (send_command(cmd)) or a string (send_command("show interfaces description")). A string with the result of the command is returned; here in the output variable. send_command() is used for sending reading commands to a device; it is not made for writting commands to a device (like send_config_set() below).

.. code-block:: Python

   # Sending command
   output = await sw1.send_command(cmd)


Then the result is printed out on the screen.

.. code-block:: Python

   # Display message
   print(output)

On a Cisco IOS device the "show interfaces description" should look like this:

.. code-block::

   R1#show interfaces description
   Interface                      Status         Protocol Description
   Fa0/0                          up             up
   Fa0/1                          up             up
   Fa1/0                          up             up
   Fa1/1                          up             up
   Et2/0                          up             up
   Et2/1                          up             up
   Et2/2                          up             up
   Et2/3                          up             up
   R1#

The first example script would give that result:

.. code-block::

   c:\>simple_command.py
   Interface                      Status         Protocol Description
   Fa0/0                          up             up
   Fa0/1                          up             up
   Fa1/0                          up             up
   Fa1/1                          up             up
   Et2/0                          up             up
   Et2/1                          up             up
   Et2/2                          up             up
   Et2/3                          up             up

   c:\>

02 - Without context manager
****************************

netscud allows not to use wontext manager ("with" instruction) but in that case more commands are needed for the same purpose. Example 1 is preferred since there is no need to close connections manually which is less prone to errors.

Here is an example:

.. code-block:: Python

   # Python library import
   import asyncio, netscud


   async def task():
      """
      Async function
      """

      my_device = {
         "ip": "192.168.0.16",
         "username": "cisco",
         "password": "cisco",
         "device_type": "cisco_ios",
      }

      # Creation of a device
      sw1 = netscud.ConnectDevice(**my_device)

      # Connection to the device
      await sw1.connect()

      # Command to send
      cmd = "show interfaces description"

      # Sending command
      output = await sw1.send_command(cmd)

      # Display message
      print(output)

      # Disconnection
      await sw1.disconnect()


   # Main function call
   if __name__ == "__main__":

      # Main async loop
      asyncio.run(task())


03 - Config command
*******************

send_command() sends commands mostly for reading information (like Cisco IOS "show" commands). But in order to send configuration commands to a switch or a router send_config_set() is to be used. Basically send_config_set() is equivalent as all the commands that can be sent in "configure terminal" mode on Cisco IOS devices.

In this example 3 commands are sent to a network device:

.. code-block:: Python

   # Python library import
   import asyncio, netscud


   async def task():
      """
      Async function
      """

      my_device = {
         "ip": "192.168.0.16",
         "username": "cisco",
         "password": "cisco",
         "device_type": "cisco_ios",
      }

      # Connection to the device
      async with netscud.ConnectDevice(**my_device) as sw1:

         # Commands to send
         cmds = [
               "interface FastEthernet1/0",
               "ip address 1.1.1.1 255.255.255.0",
               "no shutdown",
         ]

         # Sending command
         output = await sw1.send_config_set(cmds)

         # Display message
         print(output)


   # Main function call
   if __name__ == "__main__":

      # Main async loop
      asyncio.run(task())

**Explanation:**

send_config_set() accepts either a string or a list of strings; in this case all the strings are commands to configure the network device.

In this example a list of 3 commands are selecting an interface, set its IP address then enable it.

.. code-block:: Python

   # Commands to send
   cmds = [
         "interface FastEthernet1/0",
         "ip address 1.1.1.1 255.255.255.0",
         "no shutdown",
   ]

   # Sending command
   output = await sw1.send_config_set(cmds)


Thus before this program a network device could get this configuration:

.. code-block::

   R1#show ip interface brief
   Interface              IP-Address      OK? Method Status                Protocol
   FastEthernet0/0        192.168.0.16    YES NVRAM  up                    up
   FastEthernet0/1        unassigned      YES manual up                    up
   FastEthernet1/0        unassigned      YES manual administratively down down
   FastEthernet1/1        unassigned      YES DHCP   up                    up
   Ethernet2/0            unassigned      YES DHCP   up                    up
   Ethernet2/1            unassigned      YES NVRAM  up                    up
   Ethernet2/2            unassigned      YES NVRAM  up                    up
   Ethernet2/3            unassigned      YES NVRAM  up                    up
   R1#

At runtime the program gives that result:

::

   c:\>config_command.py
   configure terminal
   Enter configuration commands, one per line.  End with CNTL/Z.
   R1(config)#interface FastEthernet1/0
   R1(config-if)#ip address 1.1.1.1 255.255.255.0
   R1(config-if)#no shutdown
   R1(config-if)#exit
   R1(config)#

   c:\>


Then on the network device we have that configuration:

.. code-block::

   R1#show ip interface brief
   Interface              IP-Address      OK? Method Status                Protocol
   FastEthernet0/0        192.168.0.16    YES NVRAM  up                    up
   FastEthernet0/1        unassigned      YES manual up                    up
   FastEthernet1/0        1.1.1.1         YES manual up                    up
   FastEthernet1/1        unassigned      YES DHCP   up                    up
   Ethernet2/0            unassigned      YES DHCP   up                    up
   Ethernet2/1            unassigned      YES NVRAM  up                    up
   Ethernet2/2            unassigned      YES NVRAM  up                    up
   Ethernet2/3            unassigned      YES NVRAM  up                    up
   R1#


04 - managing exceptions
************************






































